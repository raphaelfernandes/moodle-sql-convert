{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","prefix","convertSqlPrefix","editorLeft","editorRight","labelSwitch","labelLeft","labelRight","handlePrefixChange","bind","assertThisInitialized","handleSwitchConvert","handleSwitchNormalize","editorLeftChange","editorRightChange","convertSql","event","_this2","setState","target","value","_this3","_this4","_this5","regex","subst","result","RegExp","replace","react_default","a","createElement","className","type","onChange","onClick","renderClassButton","index_es","lib_default","mode","theme","fontSize","name","editorProps","$blockScrolling","height","href","rel","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.87ddd752.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport AceEditor from 'react-ace';\nimport brace from 'brace';\n// import Switch from \"react-switch\";\nimport { ArrowForwardIos, ArrowForwardIosTwoTone, ExpandMore} from '@material-ui/icons';\n\nimport 'brace/mode/mysql';\nimport 'brace/theme/xcode';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      prefix: 'mdl_',\n      convertSqlPrefix: true,\n      editorLeft: `SELECT \n  *\nFROM\n  mdl_user`,\n      editorRight: '',\n      labelSwitch: '',\n      labelLeft: 'mdl_a',\n      labelRight: '{a}'\n    };\n\n    this.handlePrefixChange = this.handlePrefixChange.bind(this);\n    this.handleSwitchConvert = this.handleSwitchConvert.bind(this);\n    this.handleSwitchNormalize = this.handleSwitchNormalize.bind(this);\n    this.editorLeftChange   = this.editorLeftChange.bind(this);\n    this.editorRightChange  = this.editorRightChange.bind(this);\n    this.convertSql         = this.convertSql.bind(this);\n  }\n\n  componentDidMount(){\n    this.convertSql();\n  }\n\n  handlePrefixChange(event) {\n    this.setState({prefix: event.target.value},()=>{\n      this.convertSql();\n    });\n  }\n\n  handleSwitchConvert() {\n    var convertSqlPrefix = true;\n\n    this.setState({ \n      convertSqlPrefix\n    },()=>{\n      this.convertSql();\n    });\n  }\n\n  handleSwitchNormalize() {\n    var convertSqlPrefix = false;\n\n    this.setState({ \n      convertSqlPrefix\n    },()=>{\n      this.convertSql();\n    });\n  }\n  \n  editorLeftChange(editorLeft) {\n    this.setState({ editorLeft },()=>{\n      this.convertSql();\n    });\n  }\n  \n  editorRightChange(editorRight) {\n    this.setState({ editorRight });\n  }\n\n  renderClassButton(state){\n    if(this.state.convertSqlPrefix === state){\n      return 'button-change active';\n    }else{\n      return 'button-change';\n    }\n  }\n\n  convertSql(){\n    var regex = null,\n    subst = null,\n    result = null;\n    if(!this.state.convertSqlPrefix){\n      regex = /{(.\\S{1,}[a-zA-Z0-9]*\\S)}/gm;\n      subst = this.state.prefix+`$1`;\n      result = this.state.editorLeft.replace(regex, subst);\n      this.setState({editorRight:result});\n    }else{  \n      regex = new RegExp(this.state.prefix+'(.*?\\\\w+)','gm');\n      subst = `{$1}`;\n      result = this.state.editorLeft.replace(regex, subst);\n      this.setState({editorRight:result});\n    }\n\n    if(this.state.convertSqlPrefix){\n      this.setState({labelSwitch:'Normalizar Consulta'});\n    }else{\n      this.setState({labelSwitch:'Adicionar Prefix'});\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <h1>Moodle SQL Convert</h1>\n        </header>\n        <div className='content buttons-convert'>\n            <div className='col-item'>\n              <label>Prefix\n                <input \n                  type='text' \n                    value={this.state.prefix} \n                    className='inp-prefix'\n                    onChange={this.handlePrefixChange}/>\n              </label>\n            </div>\n            <div className='col-item'>\n              <span className='label-switch'> \n                <button onClick={this.handleSwitchConvert} className={this.renderClassButton(true)}> \n                  <span className='label-exemple'>{this.state.labelLeft}</span>\n                  <ArrowForwardIos></ArrowForwardIos>\n                  <span className='label-exemple'>{this.state.labelRight}</span>\n                </button>\n                <button onClick={this.handleSwitchNormalize} className={this.renderClassButton(false)}> \n                  <span className='label-exemple'>{this.state.labelRight}</span>\n                  <ArrowForwardIos></ArrowForwardIos>\n                  <span className='label-exemple'>{this.state.labelLeft}</span>\n                </button>\n              </span>\n            </div>\n        </div>\n        <div className='content'>\n          <div className='col-item editor-left'>\n            <AceEditor\n                mode=\"mysql\"\n                theme=\"xcode\"\n                fontSize={16}\n                name=\"editor-left\"\n                onChange={this.editorLeftChange}\n                value={this.state.editorLeft}\n                editorProps={{ $blockScrolling: true }}\n                height='400px'\n              />\n          </div>\n          <div className='col-item'>\n            <div className='item-colum'>\n              <ArrowForwardIosTwoTone></ArrowForwardIosTwoTone>\n            </div>\n            <div className='item-row'>\n              <ExpandMore></ExpandMore>\n            </div>\n          </div>\n          <div className='col-item editor-right'>\n            <AceEditor\n                mode=\"mysql\"\n                theme=\"xcode\"\n                fontSize={16}\n                name=\"editor-right\"\n                value={this.state.editorRight}\n                editorProps={{ $blockScrolling: true }}\n                height='400px'\n              />\n          </div>\n        </div>\n        <footer>\n          <div className='content'>\n            <div className='col-item'>\n              <a href='https://github.com/raphaelfernandes/moodle-sql-convert' rel=\"noopener noreferrer\" target='_blank' className='g-msc'>GitHub Moodle SQL Convert</a>\n            </div>\n          </div>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}